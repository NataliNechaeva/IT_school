1. Виды условных операторов:
- условный оператор **if** (с одной ветвью)
- условный оператор **if...else** (с двумя ветвями)
- условный оператор **else if...** (с несколькими ветвями)
- тернарный оператор (**?:**)
- оператор выбора **switch**
2. let date = new Date();

let time= date.getHours() < 10 ? alert( "Доброе утро!" ) : alert( "Добрый день!" );

3. alert выведется. Т.к. любая строка, кроме пустой (а строка "0" – не пустая), в логическом контексте становится true. If (0) бы не вывело alert
4. 
- true Так как если в логическом выражении `operand1 && operand2` используются логические значения, то результатом этого выражения будет значение **true**, если каждый из них равен **true.**
- false Если в логическом выражении `operand1 || operand2` используются булевы значения, то результатом этого выражения будет значение **true**, если хотя бы один из них равен **true**; иначе значением этого выражения будет значение **false (в нашем случае оба значения false)**
- Результатом логического выражения !(3 == 6)  будет значение **true**, так как 3 == 6 равно **false.**
5. 
- Использование атрибута HTML

<input value="Нажми меня" *onclick="alert('Клик!')"* type="button">

Атрибут HTML-тега – не самое удобное место для написания большого количества кода, поэтому лучше создать отдельную JavaScript-функцию и вызвать её там.

- 

Можно назначать обработчик, используя свойство DOM-элемента `on<событие>`.

К примеру, `elem.onclick`

- 

Назначение обработчиков при помощи специальных методов `addEventListener` и `removeEventListener`. 

Синтаксис добавления обработчика:

```jsx
element.addEventListener(event, handler[, options]);
```

Это самый оптимальный способ, так как условный ы других способах невозможно повесить несколько обработчиков на одно событие.

6. Запись некорректна `button.onclick = hello();`

Если добавить скобки, то `hello()` – это уже вызов функции, результат которого (равный `undefined`, так как функция ничего не возвращает) будет присвоен `onclick`. Так что это не будет работать.
7. 
- Событие [KeyDown] возникает один раз.
- Событие [KeyPress], которое может встречаться несколько раз, если пользователь удерживает нажатую клавишу.
- Событие [KeyUp](h возникает один раз при отпускании клавиши.
8. Событие - это сигнал от браузера о том, что что-то произошло.
Есть множество самых различных событий.
- DOM-события, которые инициируются элементами DOM. Например, событие `click` происходит при клике на элементе, а событие `mouseover` - когда указатель мыши появляется над элементом,
- События окна. Например событие `resize` - при изменении размера окна браузера,

Именно DOM-события связывают действия, происходящие в документе, с кодом JavaScript, тем самым обеспечивая динамический веб-интерфейс.

Когда происходит событие, браузер создаёт *объект события*, записывает в него детали и передаёт его в качестве аргумента функции-обработчику.

Свойства объекта `Event`:
- `bubbles` – логическое значение, указывающее на то является ли данное событие всплывающим;
- `cancelable` – определяет можно ли событие отменить;
- `cancelBubble` – при установке `true` предотвращает всплытие события, т.е. оно всплывать не будет (является псевдонимом метода `stopPropagation`);
- `composed` – указывает может ли событие всплывать через из теневого DOM (внутреннего DOM конкретного элемента) в обычный DOM документа;
- `currentTarget` – элемент, привязанный к обработчику события;
- `defaultPrevented` – показывает был ли для события вызван метод `preventDefault`;
- `eventPhase` – число, указывающее фазу процесса распространения события (0 – не обрабатывается, 1 – погружение, 2 – целевой элемент, 3 – всплытие);
- `isTrusted` – указывает вызвано ли событие действием пользователя или программно (посредством использования метода `dispatchEvent`);
- `returnValue` – альтернатива для `preventDefault`;
- `target` – элемент, который создал событие;
- `timestamp` – время, когда произошло событие;
- `type` – тип (имя) события.

Свойства объекта события при `click`, `dblclick`, `mousedown` и`mouseup`:

- `altKey`, `ctrlKey`, `metaKey` и `shiftKey` – позволяют узнать была ли нажата соответствующая клавиша (т.е., , ,  и ) при возникновении событии;

    alt

    ctrl

    meta

    shift

- `which` – число, сообщающее о том, какая кнопка мыши была нажата (1 - левая кнопка, 2 - средняя кнопка, 3 - правая кнопка);
- `button` – также как и `which` указывает какая кнопка мыши была нажата, чтобы вызвать данное событие (0 – основная кнопка, обычно левая кнопка мыши, 1 – кнопка колёсика или средняя кнопка, 2 – правая кнопка);
- `clientX` и `clientY` – координаты курсора относительно левого верхнего угла viewport;
- `screenX` и `screenY` – координаты клика относительно верхнего левого угла физического экрана или окна браузера;
- `screenX` и `screenY` – координаты клика относительно верхнего левого угла физического экрана или окна браузера;
- `pageX` и `pageY` – координаты клика относительно левого верхнего угла отображаемой страницы.

Объект KeyboardEvent позволяет обрабатывать взаимодействия пользователя с клавиатурой:

- `altKey`, `ctrlKey`, `metaKey` и `shiftKey` – аналогично MouseEvent;
- `keyCode` и `which` – код символа;
- `code` – физической код клавиши на клавиатуре;
- `key` – значение символа нажатой клавиши;
- `location` – возвращает число, сообщающее о расположении клавиши на клавиатуре;
- `repeat` – возвращает true, когда нажата клавиши, ввод которой автоматически повторяется.
9. ***Операторы сравнения***
- x == y (x равно y) (помним, что простой знак равенства – это оператор присваивания)
- x != y (x не равно y)
- x < y (x меньше чем y)
- x > y (x больше чем y)
- x <= y (x меньше чем или равно y)
- x >= y (x больше чем или равно y)
