1. Можно использовать одинарные, двойные и обратные кавычкию Разница в том, что если использовать обратные кавычки, то в такую строку мы сможем вставлять произвольные выражения, обернув их в `${…}` Также можем делать персонализированные обращения и они могут занимать более одной строки
2. Для поиска в строке некоторой подстроки используются методы indexOf() (индекс первого вхождения подстроки) и lastIndexOf() (индекс последнего вхождения подстроки). Эти методы принимают два параметра:

- Подстроку, которую надо найти
- Необязательный параметр, который указывает, с какого символа следует проводить поиск подстроки в строке

Н-р: "Hello World".indexOf("o"); // 4

"Hello World".indexOf("o", 5); // 7

"Hello World".lastIndexOf("o"); // 7

"Hello World".lastIndexOf("o", 5); // 4

3. Следующий символ, после обратного слэша, является управляющим. Например, \n – управляющий символ, он означает «перевод на следующую строку».

Одинарные и двойные кавычки появились в JavaScript давно, поэтому работают очень традиционно, например, они должны располагаться в одной строке кода и не могут переноситься на несколько строк. Обратные кавычки в этом плане очень гибкие: используя их, можно строковый тип данных разместить сразу в нескольких строках кода, и это не будет считаться ошибкой. А в двойных и одинарных кавычках для этого нужно применять специальный символ «\n».

4. let name2 = name1[0].toUpperCase() + name1.substring(1);
5. const d1 = new Date(2021, 0, 24, 22, 51);
6. 
function getSecondsToTomorrow(){
  let d = new Date();
  let s = d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds();
  d.setHours(23, 59, 59, 59);
  let v = d.getHours() * 3600 + d.getMinutes() * 60 + d.getSeconds();
   let e = v  - s;
   return e;
}
console.log(getSecondsToTomorrow())
7. $('#summ').find('span').text().replace(/\D+/g,"");
8. Метод `split()` применяется для трансформации строки в массив. Split разделяет строку (string) по указаному параметру.

```
let str = 'Аня, Маша, Саша, Даша';  // это строка
let arr = str.split(', ');

console.log( arr );  // → ['Аня', 'Маша', 'Саша', 'Даша'] - это массив
```

Copy

---

## **[#](https://v3c.ru/javascript/metods-array#join) join**

Метод `join()` объединяет элементы массива в строку, через указанный в параметре разделитель.

`let arr = ['Notpad++', 'Sublime', 'VSCode'];  // это массив
let str = arr.join(', ');

console.log( 'Редакторы для кода: ' + str );  //`

9. `Math.round(параметр)` – математическое округление, т.е. когда дробная часть числа больше или равна 0.5, то оно округляется в большую сторону, а иначе в меньшую сторону;
10. let numberRandom = Math.round((Math.random()*100));
11. 
- `str.trim()` — убирает пробелы в начале и конце строки.
12. Регулярные выражения могут иметь флаги, которые влияют на поиск. Чтобы заменить все совпадения, используйте регулярное выражение с `/g` флагом. Для замены без учета регистра используйте регулярное выражение с `/i` флагом.
