1. класс — это шаблон, описывающий свойства и методы, которыми будет обладать любой объект, созданный на основе этого класса. Класс: насекомые; объекты: муравей, паук, бабаочка. Класс: служащие банка; объекты: руководитель, главные специалист, оператор.
2. *например, в жизни*
- *банк мог бы содержать классы Счета (реквизиты, владелец, год открытия, остаток, движение по счету), Сотрудники (ФИО, должность, зарплата, дата начала работы) и Клиенты (ФИО, контакты, номер счета).*
- биржа *могла бы содержать классы Ценные бумаги (тип, название, год выхода на биржу, колическтво, стоимость, изменение котировок), владельцы репозиториев (ФИО, контакты, номер счета, количество и стоимость ЦБ)*

например в програмировании: Посетители сайта (логин, время нахождения на сайте, посещаемые страницы); Пост в соцсети(автор, дата, количество просмотров и комментариев)

3. Конструктор - это специальная функция, задача которой заполнить пустой объект свойствами и методами. Иными словами, конструктор - это функция, которая конфигурирует объект для дальнейшего использования.

Существуют три базовых типа конструкторов в Java:

- Конструктор по умолчанию (default constructor)
- Конструктор без аргументов (no-args constructor)
- Параметризованный конструктор (parameterized constructor)
4. выведет:

    ninja

    pomidor

    site

Почему - не знаю........
5. Методы и свойства класса, которые не привязаны к конкретному объекту и могут существовать без создания экземпляра и слова `new`, называются *статическими*. Обычно статические методы используются для реализации функций, принадлежащих классу, но не к каким-то конкретным его объектам.
6. **Функции доступа обычно бывают двух типов**:

**геттеры** — это функции, которые возвращают значения закрытых переменных-членов класса;

**сеттеры** — это функции, которые позволяют присваивать значения закрытым переменным-членам класса.

Вот пример класса, который использует геттеры и сеттеры для всех своих закрытых переменных-членов:

**class Date{**

**private:**    

         **int m_day;**    

         **int m_month;**    

         **int m_year;** 

**public:    int getDay() { return m_day; } *// геттер для day***    

**void setDay(int day) { m_day = day; } *// сеттер для day***

     ****

**int getMonth() { return m_month; } *// геттер для month***    

**void setMonth(int month) { m_month = month; } *// сеттер для month***    

 ****

**int getYear() { return m_year; } *// геттер для year***    

**void setYear(int year) { m_year = year; } *// сеттер для year***

**};**

7. Выведет object (Prototype). Вызов typeof возвращает строку, содержащую информацию о типе операнда.
8. Выведет: Object
    
                        age: 23
    
                        name: "Valera"
    
    Property 'city' does not exist on type '{ name: string; age: number; }'.
