1.

- *банк мог бы содержать классы Счета (реквизиты, владелец, год открытия, остаток, движение по счету), Сотрудники (ФИО, должность, зарплата, дата начала работы) и Клиенты (ФИО, контакты, номер счета).*

let json = `[{

"name": "Иванов Иван",

"number": 123456789,

"yearopen": 2010,

"remains": 10000

}, {

"name": "Петр Петров",

"number": 123456789,

"yearopen": 2016,

"remains": 40000

}]`;

- биржа *могла бы содержать классы Ценные бумаги (тип, название, год выхода на биржу, колическтво, стоимость, изменение котировок), владельцы репозиториев (ФИО, контакты, номер счета, количество и стоимость ЦБ)*

let json = `[{

"name": "SBERP",

"isin": "123456789021554",

"yearopen": 2010,

"price": 100

}, {

"name": "GMKN",

"isin": "145456789021554",

"yearopen": 2010,

"price": 14500

}]`;

2. let dog = `[{

"breed": "Beagle",

"size": "large",

"color": "orange",

"age": "6 years"

}]`;

```
<?xml version="1.0"?>
<DOG>
  <BREED>Beagle</BREED>
 <SIZE>LARGE</SIZE>
  <AGE>6 years</AGE>
  <COLOR>orange</COLOR>
</DOG>
```

3. Если нам нужно отправить какие-то данные на сервер, то мы должны сначала упаковать их в строку JSON-формата (**сериализовать**) и только потом отправлять. 

В качестве ответа от сервера клиент получает строку JSON и распаковывает (**десериализует**, парсит) её, т.е. превращает в JavaScript объект. 

// сериализация
let serializedUser = JSON.stringify(user);
// десериализация
let parsedUser = JSON.parse(serializedUser);
document.write(parsedUser.name); // Иван

4. нет  Мы можем выбрать только один метод чтения ответа. Если мы уже получили ответ с `response.text()`, тогда `response.json()` не сработает, так как данные уже были обработаны.
5. в JS у нас есть операции, которые выполняются в фоновом/активном режиме, и поэтому наше веб-приложение не зависает каждый раз, когда оно ожидает пользовательское событие. Асинхронный – означает то, что действие выполняется в фоне (не в основном потоке), другими словами, таким образом, что это не мешает пользователю взаимодействовать со страницей
6. Достоинство AJAX: позволяет асинхронно обновлять веб-страницы, обмениваясь данными с веб-сервером во время работы приложения. Короче говоря, это означает, что вы можете обновлять части веб-страницы без перезагрузки всей страницы (их URL-адрес остается прежним). Это значит, что наша страничка будет работать гораздо быстрее - ведь перегружаем только ее кусочек, а не всю целиком.
7. 

fetch("https://api.github.com/users/NataliNechaeva")

.then(response => response.json())

.then(user => console.log(user.login))

8. SPA — Single Page Application

SPA работает так: когда пользователь открывает страницу, браузер загружает сразу весь код приложения. Но показывает только конкретный модуль — часть сайта, которая нужна пользователю. Когда пользователь переходит в другую часть приложения, браузер берёт уже загруженные данные и показывает ему. И, если нужно, динамически подгружает с сервера нужный контент без обновления страницы.

С одной стороны, такие приложения работают быстро и меньше нагружают сервер. С другой стороны, они требуют большей загрузки на старте.
