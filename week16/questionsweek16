1. 
- с помощью квадратных скобок
- с помощь. new Array let arr = *new Array*("Яблоко", "Груша", "и тд");
2.
1. Список возможных возрастов студентов унивеситета [17, 16, 18, 19, 21]-  это массив, списки студентов унивеситета, списки предметов в программе тоже могут быть массивом
3. Метод filter() — самое универсальное решение. С его помощью можно удалить как один, так и несколько элементов, причем хоть по значению, хоть по индексу. Это неизменяемое решение. С его помощью, собственно, не элемент удаляется, а создается новый массив, из которого отфильтровываются нежелательные элементы.

Если вы хотите удалить из массива какой-то определенный элемент, можно воспользоваться методом splice(). Этот метод умеет не только удалять элементы, но и добавлять новые.

При помощи метода splice() можно удалить и больше одного элемента за раз. Для этого в качестве первого параметра укажите начальный индекс. Вторым параметром идет число элементов, которые вы хотите удалить. Этот второй параметр опционален. Если вы его не укажете, метод удалит указанный в первом параметре элемент, а также все элементы справа от него.

Использование метода delete может быть очевидным, но он работает не так, как вы, вероятно, ожидаете. Он не удаляет элемент, а стирает его значение. Длина массива останется той же, а на позиции, которую вы очистили, будет неопределенное значение.

4. 

Любая часть `for` может быть пропущена.

Например, можно убрать `начало`. Цикл в примере ниже полностью идентичен приведённому выше:

`var i = 0;

for (; i < 3; i++) {
  alert( i ); // 0, 1, 2
}`

Можно убрать и `шаг`:

`var i = 0;

for (; i < 3;) {
  alert( i );
  // цикл превратился в аналог while (i<3)
}`

А можно и вообще убрать всё, получив бесконечный цикл:

`for (;;) {
  // будет выполняться вечно
}`

При этом сами точки с запятой `;` обязательно должны присутствовать, иначе будет ошибка синтаксиса.

5.

Цикл `while` имеет вид:

`while (условие) {
  // код, тело цикла
}`

Пока `условие` верно – выполняется код из тела цикла.

Например, цикл ниже выводит `i` пока `i < 3`:

`var i = 0;
while (i < 3) {
  alert( i );
  i++;
}`

**Повторение цикла по-научному называется *«итерация»*. Цикл в примере выше совершает три итерации.**

Если бы `i++` в коде выше не было, то цикл выполнялся бы (в теории) вечно. На практике, браузер выведет сообщение о «зависшем» скрипте и посетитель его остановит.

**Бесконечный цикл** можно сделать и проще:

`while (true) {
  // ...
}`

**Условие в скобках интерпретируется как логическое значение, поэтому вместо `while (i!=0)` обычно пишут `while (i)`**:

`var i = 3;
while (i) { // при i, равном 0, значение в скобках будет false и цикл остановится
  alert( i );
  i--;
}`
6. массив *без элементов*, где length 5, а все элементы равны `undefined`.
7. 

for (let i = 2; i <= 10; i++) {
  if (i % 2 == 0) {
    alert( i );
  }
}

8. a,b,function() {

alert (arr);

} - результат

вначале мы добавили новый элемент в массив - функцию. теперь вызываем третий элемент массива [2] - эту функцию  - которая в свою очередь выведет массив arr.

9. 
- Цикл **for (**традиционный**)**
- Цикл **for ... of**
- Метод **forEach** (появился в ES5)

10.

document.querySelectorAll(input);

11. 

numbers.sort(function (a, b) {

return a - b;

});

где numbers - это массив чисел

12. мы можем выйти из цикла в любой момент с помощью специальной директивы `break`. Директива `break` полностью прекращает выполнение цикла и передаёт управление на строку за его телом. Директива `continue` – «облегчённая версия» `break`. При её выполнении цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно `true`).
