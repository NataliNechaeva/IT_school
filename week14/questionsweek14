1. способы объявления функций:
- Function Declaration (основной)
- Function Expression
- Стрелочные функции (самый новый)

2.

- var sum = function(a, b) {
return a + b;};
- function sum(a, b) { 
return a + b;}
- let sum = (a, b) => a + b;
3. Процессы тестирования и отладки различаются тем, что тестирование обнаруживает дефекты программного обеспечения, не требующие их исправления. И наоборот, отладка - это более глубокий процесс, в котором ошибки не только выявляются, но и выделяются из кода и исправляются. Тестирование и отладка работают циклически, при этом тестирование обнаруживает ошибку, а отладка устраняет ее. Следовательно, отладка не является тестированием, но проводится как следствие тестирования.
4. 
- *Function Declaration -* функция, объявленная в основном потоке кода.
- *Function Expression -* объявление функции в контексте какого-либо выражения, например присваивания.

Несмотря на немного разный вид, по сути две эти записи делают одно и то же:

```
// Function Declaration
function sum(a, b) {
  return a + b;
}

// Function Expression
var sum = function(a, b) {
  return a + b;
}

```

Оба этих объявления говорят интерпретатору: "объяви переменную`sum`, создай функцию с указанными параметрами и кодом и сохрани её в`sum`".

**Основное отличие между ними: функции, объявленные как Function Declaration, создаются интерпретатором до выполнения кода.**

Поэтому их можно вызвать **до** **объявления. А если бы это было объявление **Function Expression, то такой вызов бы не сработал.**

5.

1. Для отладки кода. Когда нет желания или необходимости просматривать каждый шаг в отладчике. Просто что-то вывел и смотришь, где что пошло не так.
2. Можно просто писать мелкие скрипты, которые делают что-то (да хоть какое-то вычисление), прямо-в консоли браузера - в таком случае console.log - это правомерный и единственный адекватный вывод.
6.  

**BOM (Browser Object Model)**

Объектная модель браузера (Browser Object Model, BOM) – это дополнительные объекты, предоставляемые браузером (окружением), чтобы работать со всем, кроме документа.

## DOM (Document Object Model)

Document Object Model, сокращённо DOM – объектная модель документа, которая представляет все содержимое страницы в виде объектов, которые можно менять.

В модели DOM каждый HTML-тег является объектом. Вложенные теги являются «детьми» родительского элемента. Текст, который находится внутри тега, также является объектом.

Все эти объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы.

Объект `document` – основная «входная точка». С его помощью мы можем что-то создавать или менять на странице.

7. 
- document.getElementById('age-table')
- table.getElementsByTagName('label')
- let form = document.getElementsByName('search')[0]
8. 

Следующий код будет перенаправлять посетителя на целевую страницу после нажатия на **#mybutton**:

`document.getElementById('mybutton').onclick = function() {
  window.location.href = 'redirect-url';
};`

Можно сделать то же самое, используя следующий код:

`<button onclick="window.location.href = '/'">Go to Homepage</button>`
9. 

Способ **1:** Очистка ввода на фокусе.

**Синтаксис:**

```
<input onfocus=this.value=''>
```

например: <input type="text" onfocus="this.value=''" value="Click here to clear">

**Способ 2:** очистка ввода с помощью кнопки.

**Синтаксис:**

```
<button onclick="document.getElementById('InputID').value = ''>
```

**Подход:**

- Создать **кнопку** .
- Получить **идентификатор** поля ввода.
- Установите значение поля ввода, используя **document.getElementById ('myInput'). Value  =' '**

`<button` `onclick=`

`"document.getElementById(`

`'myInput').value` `= ''">`

`Click here to clear`

`</button>`
10.   JS:

let Greeting = () => {

let UserNameInput=document.getElementById("NameUser");

document.getElementById('result').innerHTML = `Привет, ${UserNameInput.value}!`;

}

HTML:

<body>

<label for="NameUser">Введите ваше имя</label>

<p>

<input type="text" name="UserName" id="NameUser" placeholder="Имя"></p>

<p>

<input type="button" name="Save" value="Сохранить" onclick="Greeting ()">

</p>

<div id="result"></div>

</body>
